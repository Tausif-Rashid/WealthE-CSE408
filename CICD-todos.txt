Project Structure Analysis
Your project has:

Backend: Spring Boot application with JWT authentication
Frontend: React application
Database: PostgreSQL with existing data dump
Docker: Multi-container setup with docker-compose
Target: Azure B2s VM deployment

Complete CI/CD Implementation:

1. GitHub Actions Workflow Files
name: WealthE CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME_BACKEND: ${{ github.repository }}/wealthe-backend
  IMAGE_NAME_FRONTEND: ${{ github.repository }}/wealthe-frontend

jobs:
  # Job 1: Run Tests
  test:
    runs-on: ubuntu-latest
    name: Run Tests
    
    services:
      postgres:
        image: postgres:17-alpine
        env:
          POSTGRES_PASSWORD: test_password
          POSTGRES_USER: test_user
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: frontend/wealthe-frontend/package-lock.json

    # Backend Tests
    - name: Cache Maven dependencies
      uses: actions/cache@v3
      with:
        path: ~/.m2
        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}

    - name: Run Backend Tests
      working-directory: ./backend/wealthe
      run: |
        chmod +x ./mvnw
        ./mvnw clean test
      env:
        SPRING_DATASOURCE_URL: jdbc:postgresql://localhost:5432/test_db
        SPRING_DATASOURCE_USERNAME: test_user
        SPRING_DATASOURCE_PASSWORD: test_password
        SPRING_JPA_HIBERNATE_DDL_AUTO: create-drop

    # Frontend Tests
    - name: Install Frontend Dependencies
      working-directory: ./frontend/wealthe-frontend
      run: npm ci

    - name: Run Frontend Tests
      working-directory: ./frontend/wealthe-frontend
      run: npm test -- --coverage --watchAll=false
      env:
        CI: true

    - name: Run Frontend Linting
      working-directory: ./frontend/wealthe-frontend
      run: npm run lint || true

    # Upload test results
    - name: Upload Test Results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: test-results
        path: |
          backend/wealthe/target/surefire-reports/
          frontend/wealthe-frontend/coverage/

  # Job 2: Build and Push Docker Images
  build:
    needs: test
    runs-on: ubuntu-latest
    name: Build Docker Images
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata for Backend
      id: meta-backend
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_BACKEND }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Extract metadata for Frontend
      id: meta-frontend
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_FRONTEND }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Build and push Backend Docker image
      uses: docker/build-push-action@v5
      with:
        context: ./backend/wealthe
        push: true
        tags: ${{ steps.meta-backend.outputs.tags }}
        labels: ${{ steps.meta-backend.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Build and push Frontend Docker image
      uses: docker/build-push-action@v5
      with:
        context: ./frontend/wealthe-frontend
        push: true
        tags: ${{ steps.meta-frontend.outputs.tags }}
        labels: ${{ steps.meta-frontend.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  # Job 3: Deploy to Azure VM
  deploy:
    needs: [test, build]
    runs-on: ubuntu-latest
    name: Deploy to Azure VM
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup SSH key
      run: |
        mkdir -p ~/.ssh
        echo "${{ secrets.AZURE_SSH_KEY }}" > ~/.ssh/id_rsa
        chmod 600 ~/.ssh/id_rsa
        ssh-keyscan -H ${{ secrets.AZURE_HOST }} >> ~/.ssh/known_hosts

    # Deploy application to Azure VM
    - name: Deploy to Azure VM
      run: |
        # Copy deployment files to server
        scp -r ./deploy-scripts/ ${{ secrets.AZURE_USER }}@${{ secrets.AZURE_HOST }}:/home/${{ secrets.AZURE_USER }}/
        scp ./docker-compose.prod.yml ${{ secrets.AZURE_USER }}@${{ secrets.AZURE_HOST }}:/home/${{ secrets.AZURE_USER }}/
        scp ./.env.production ${{ secrets.AZURE_USER }}@${{ secrets.AZURE_HOST }}:/home/${{ secrets.AZURE_USER }}/.env
        
        # Execute deployment script on server
        ssh ${{ secrets.AZURE_USER }}@${{ secrets.AZURE_HOST }} << 'EOF'
          # Navigate to deployment directory
          cd /home/${{ secrets.AZURE_USER }}/
          
          # Make deployment script executable
          chmod +x ./deploy-scripts/deploy.sh
          
          # Run deployment
          ./deploy-scripts/deploy.sh ${{ github.sha }}
        EOF

    # Health Check
    - name: Health Check
      run: |
        # Wait for application to start
        sleep 60
        
        # Check if application is responding
        curl -f http://${{ secrets.AZURE_HOST }}/health || exit 1
        curl -f http://${{ secrets.AZURE_HOST }}:8081/actuator/health || exit 1

    # Notify deployment status
    - name: Notify Deployment Success
      if: success()
      run: |
        echo "âœ… Deployment successful!"
        echo "Frontend: http://${{ secrets.AZURE_HOST }}"
        echo "Backend: http://${{ secrets.AZURE_HOST }}:8081"